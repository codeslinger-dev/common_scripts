# ----------------------------------------------------------------------------
# -- BASH Functions (Git) ----------------------------------------------------
#
# This file defines the Git command functions to be used in a Bash session.
#
# This file is intended to be "sourced" by .bashrc (or similar):
#
#    if [ -f /<path>/.bash_functions_git ]; then
#     source /<path>/.bash_functions_git
#    fi
#
# ----------------------------------------------------------------------------
FILE_SOURCED_FUNCTIONS_GIT=TRUE


# -- Fetch this file's directory ---------------------------------------------
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )


# -- Source Common Functions, if not present ---------------------------------
if [ -z $FILE_SOURCED_FUNCTIONS_COMMON ]; then
   if [ -f  ${SCRIPT_DIR}/.bash_functions_common ]; then
     source ${SCRIPT_DIR}/.bash_functions_common
   fi
fi


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _display_git_command
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Display the provided command
#
# ----------------------------------------------------------------------------
function _display_git_command()
{
    printf "\n"
    printf " Command: [ ${TC_YEL}%s${TC_OFF} ]..\n" "${1}"
    printf " ---------------------------------------------------------------\n"

} # _display_git_command


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _execute_git_command
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Execute the provided command
#
# ----------------------------------------------------------------------------
function _execute_git_command()
{
    printf "\n"

    eval "${1}"

    printf "\n"
    printf " ---------------------------------------------------------------\n"
    printf " Command: [ ${TC_YEL}%s${TC_OFF} ].." "${1}"
    printf " ${TC_GRN}%s${TC_OFF}\n"  "COMPLETED"
    printf "\n"

} # _execute_git_command


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _ignore_git_command
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Ignore the provided command
#
# ----------------------------------------------------------------------------
function _ignore_git_command()
{
    printf "\n"

    printf "\n"
    printf " ---------------------------------------------------------------\n"
    printf " Command: [ ${TC_YEL}%s${TC_OFF} ].." "${1}"
    printf " ${TC_RED}%s${TC_OFF}\n"  "CANCELLED"
    printf "\n"

} # _ignore_git_command


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-status
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Show working-area status
#
# ----------------------------------------------------------------------------
function _git-status()
{
    local git_command="git status"

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-status


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-status-short
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Show working-area status (short output)
#
# ----------------------------------------------------------------------------
function _git-status-short()
{
    local git_command="git status --short"

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-status-short


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-add
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Stage provided file(s)
#
# ----------------------------------------------------------------------------
function _git-add()
{
    local git_command="git add \"$@\""

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-add

# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-add-all
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Stage all files (w/ confirmation)
#
# ----------------------------------------------------------------------------
function _git-add-all()
{
    local git_command="git add --all ."

    _display_git_command "${git_command}"

    printf "\n"
    if confirm_choice " Git: Stage all files?" Y; then
        printf "\n"
        _execute_git_command "${git_command}"
     else
        _ignore_git_command  "${git_command}"
    fi

} # _git-add-all


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-cherry-pick
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Apply a single commit to the current branch
#
# ----------------------------------------------------------------------------
function _git-cherry-pick()
{
    local git_command="git cherry-pick \"$@\""

    _display_git_command "${git_command}"

    printf "\n"
    if confirm_choice " Git: Apply the following commit '$@'?" Y; then
        printf "\n"
        _execute_git_command "${git_command}"
     else
        _ignore_git_command  "${git_command}"
    fi

} # _git-cherry-pick


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-cherry-pick-append
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Apply a single commit to the current branch, appending
#                 a line to the commit message ("cherry-picked from ..")
#
# ----------------------------------------------------------------------------
function _git-cherry-pick-append()
{
    local git_command="git cherry-pick -x \"$@\""

    _display_git_command "${git_command}"

    printf "\n"
    if confirm_choice " Git: Apply the following commit '$@'?" Y; then
        printf "\n"
        _execute_git_command "${git_command}"
     else
        _ignore_git_command  "${git_command}"
    fi

} # _git-cherry-pick-append


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-commit
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Commit staged files
#
# ----------------------------------------------------------------------------
function _git-commit()
{
    local git_command="git commit"

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-commit


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-commit-message
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Commmit staged files, with the provided message string
#
# ----------------------------------------------------------------------------
function _git-commit-message()
{
    local git_command="git commit --message \"$@\""

    _display_git_command "${git_command}"

    printf "\n"
    if confirm_choice " Git: Commit with message '$@'?" Y; then
        printf "\n"
        _execute_git_command "${git_command}"
     else
        _ignore_git_command  "${git_command}"
    fi

} # _git-commit-message


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-commit-amend-message
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Add any staged files to the previous commit, updating
#                 the commit message with the provided message string
#
# ----------------------------------------------------------------------------
function _git-commit-amend-message()
{
    local git_command="git commit --amend --message \"$@\""

    _display_git_command "${git_command}"

    printf "\n"
    if confirm_choice " Git: Amend previous commit with message '$@'?" Y; then
        printf "\n"
        _execute_git_command "${git_command}"
     else
        _ignore_git_command  "${git_command}"
    fi

} # _git-commit-amend-message


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-branch
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Create a branch with the provided name
#
# ----------------------------------------------------------------------------
function _git-branch()
{
    local git_command="git branch \"$@\""

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-branch


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-branch-delete
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Delete the provided branch (w/ confirmation)
#
# ----------------------------------------------------------------------------
function _git-branch-delete()
{
    local git_command="git branch --delete \"$@\""

    _display_git_command "${git_command}"

    printf "\n"
    if confirm_choice " Git: Delete branch '$@'?" N; then
        printf "\n"
        _execute_git_command "${git_command}"
     else
        _ignore_git_command  "${git_command}"
    fi

} # _git-branch-delete


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-checkout
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Checkout an existing branch
#
# ----------------------------------------------------------------------------
function _git-checkout()
{
    local git_command="git checkout \"$@\""

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-checkout


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-checkout-branch
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Checkout a new branch (w/ confirmation)
#
# ----------------------------------------------------------------------------
function _git-checkout-branch()
{
    local git_command="git checkout -b \"$@\""

    _display_git_command "${git_command}"

    printf "\n"
    if confirm_choice " Git: Create and checkout new branch '$@'?" Y; then
        printf "\n"
        _execute_git_command "${git_command}"
     else
        _ignore_git_command  "${git_command}"
    fi

} # _git-checkout-branch


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-diff
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Show unstaged differences
#
# ----------------------------------------------------------------------------
function _git-diff()
{
    local git_command="git diff"

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-diff


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-diff-all
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Show all diffs (unstaged + staged vs HEAD)
#
# ----------------------------------------------------------------------------
function _git-diff-all()
{
    local git_command="git diff HEAD"

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-diff-all


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-log
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Show the git log
#
# ----------------------------------------------------------------------------
function _git-log()
{
    local git_command="git log"

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-log


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-log-graph
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Show the git log (w/ graph)
#
# ----------------------------------------------------------------------------
function _git-log-graph()
{
    local git_command="git log --graph --oneline --decorate --all"

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-log-graph


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-log-compact
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Show the git log (w/ one-line details)
#
# ----------------------------------------------------------------------------
function _git-log-compact()
{
    local git_command="git log --pretty=format:\"%h %ad %s\" --date=short --all"

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-log-compact


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-show
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Show details of the provided commit id
#
# ----------------------------------------------------------------------------
function _git-show()
{
    local git_command="git show \"$@\""

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-show


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-show-summary
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Show a summary of the provided commit id
#
# ----------------------------------------------------------------------------
function _git-show-summary()
{
    local git_command="git show \"$@\" --stat"

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-show-summary


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-stash-list
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  Stash the current changes
#
# ----------------------------------------------------------------------------
function _git-stash()
{
    local git_command="git stash"

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-stash


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-stash-list
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  List the saved stashes
#
# ----------------------------------------------------------------------------
function _git-stash-list()
{
    local git_command="git stash list"

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-stash-list


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-stash-save
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  Save (push) the requested stash to stack
#
# ----------------------------------------------------------------------------
function _git-stash-save()
{
    local git_command="git stash save \"$@\""

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-stash-save


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-stash-pop
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  Pop the requested stash from stack
#
# ----------------------------------------------------------------------------
function _git-stash-pop()
{
    local git_command="git stash pop \"$@\""

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-stash-pop


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-stash-apply
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  Apply the requested stash to the working directory
#
# ----------------------------------------------------------------------------
function _git-stash-apply()
{
    local git_command="git stash apply \"$@\""

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-stash-apply


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-stash-drop
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  Drop the requested stash (w/ confirmation)
#
# ----------------------------------------------------------------------------
function _git-stash-drop()
{
    local git_command="git stash drop \"$@\""

    _display_git_command "${git_command}"

    printf "\n"
    if confirm_choice " Git: Drop stash '$@'?" N; then
        printf "\n"
        _execute_git_command "${git_command}"
     else
        _ignore_git_command  "${git_command}"
    fi

} # _git-stash-drop


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-push
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  Push (to remote repository)
#
# ----------------------------------------------------------------------------
function _git-push()
{
    local git_command="git push"

    _display_git_command "${git_command}"

    printf "\n"
    if confirm_choice " Git: Push to remote repository?" Y; then
        printf "\n"
        _execute_git_command "${git_command}"
     else
        _ignore_git_command  "${git_command}"
    fi

} # _git-push


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-push-branch
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  Push current branch (to remote repository)
#
# ----------------------------------------------------------------------------
function _git-push-branch()
{
    local git_command="git push -u origin HEAD"

    _display_git_command "${git_command}"

    printf "\n"
    if confirm_choice " Git: Push current branch to remote repository?" Y; then
        printf "\n"
        _execute_git_command "${git_command}"
     else
        _ignore_git_command  "${git_command}"
    fi

} # _git-push-branch


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-push-branch-by-name
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  Push current branch (to remote repository)
#
# ----------------------------------------------------------------------------
function _git-push-branch-by-name()
{
    local git_command="git push -u origin \"$@\""

    _display_git_command "${git_command}"

    printf "\n"
    if confirm_choice " Git: Push branch '$@' to remote repository?" Y; then
        printf "\n"
        _execute_git_command "${git_command}"
     else
        _ignore_git_command  "${git_command}"
    fi

} # _git-push-branch-by-name


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-pull
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  Pull (from remote repository)
#
# ----------------------------------------------------------------------------
function _git-pull()
{
    local git_command="git pull"

    _display_git_command "${git_command}"

    printf "\n"
    if confirm_choice " Git: Pull from remote repository?" Y; then
        printf "\n"
        _execute_git_command "${git_command}"
     else
        _ignore_git_command  "${git_command}"
    fi

} # _git-pull


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-pull-rebase
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  Pull and rebase (from remote repository)
#
# ----------------------------------------------------------------------------
function _git-pull-rebase()
{
    local git_command="git pull --rebase"

    _display_git_command "${git_command}"

    printf "\n"
    if confirm_choice " Git: Pull (+rebase) from remote repository?" Y; then
        printf "\n"
        _execute_git_command "${git_command}"
    else
        _ignore_git_command  "${git_command}"
    fi

} # _git-pull-rebase


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-merge
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  Perform merge, without fast-forward
#
# ----------------------------------------------------------------------------
function _git-merge()
{
    local git_command="git merge --no-ff --progress"

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-merge


# ----------------------------------------------------------------------------
#  FUNCTION NAME: _git-merge-ff
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  Perform merge, only if fast-forward is available
#
# ----------------------------------------------------------------------------
function _git-merge-ff()
{
    local git_command="git merge --ff-only"

    _display_git_command "${git_command}"
    _execute_git_command "${git_command}"

} # _git-merge-ff



# -- End of File  ------------------------------------------------------------
# ----------------------------------------------------------------------------

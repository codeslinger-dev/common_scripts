# ----------------------------------------------------------------------------
# -- BASH Functions (Common) -------------------------------------------------
#
# This file defines the Common functions to be used in a Bash session.
#
# This file is intended to be "sourced" by .bashrc (or similar):
#
#    if [ -f /<path>/.bash_functions_common ]; then
#     source /<path>/.bash_functions_common
#    fi
#
# ----------------------------------------------------------------------------
FILE_SOURCED_FUNCTIONS_COMMON=TRUE


# ----------------------------------------------------------------------------
#  PUBLIC CONSTANTS:  ANSI Terminal color codes
# ----------------------------------------------------------------------------
TC_BLK='\033[0;90m'
TC_RED='\033[0;91m'
TC_GRN='\033[0;92m'
TC_YEL='\033[0;93m'
TC_BLU='\033[0;94m'
TC_MAG='\033[0;95m'
TC_CYN='\033[0;96m'
TC_WHT='\033[0;97m'
TC_OFF='\033[0m'


# ----------------------------------------------------------------------------
#  FUNCTION NAME: confirm_choice
# ----------------------------------------------------------------------------
#  DESCRIPTION  : This is a general-purpose function to ask Yes/No questions
#                 in Bash, either with or without a default answer. It keeps
#                 repeating the question until it gets a valid answer.
#
#                 Example 1:   Default to 'Yes' if the user presses enter
#                              without giving an answer:
#
#                              if confirm_choice "Do you want to proceed?" Y; then
#                                 echo "Yes"
#                              else
#                                 echo "No"
#                              fi
# ----------------------------------------------------------------------------
#  PARAMETERS   : $1 = Text string to display as prompt
#                 $2 = Default answer (Y or N)  [optional]
# ----------------------------------------------------------------------------
function confirm_choice()
{
    # Don't pollute external environment
    local question=${1}
    local choice
    local default
    local reply

    # Requested "Y" as the default answer
    if [ "${2:-}" = "Y" ]; then
        choice="Y/n"
        default=Y

    # Requested "N" as the default answer
    elif [ "${2:-}" = "N" ]; then
        choice="y/N"
        default=N

    # No default answer requested
    else
        choice="y/n"
        default=
    fi

    # Continue until a recognized answer is provided
    while true; do

        # Display the prompt
        #  - intentially not using "read -p"
        #    as it uses stderr not stdout
        echo -e -n "$question [$choice]: "

        # Read the response
        #  - use /dev/tty in case stdin is
        #    redirected from somewhere else
        read reply </dev/tty

        # Use default?
        if [ -z "$reply" ]; then
            reply=$default
        fi

        # Check if the reply is valid
        case "$reply" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done

} # confirm_choice()


# ----------------------------------------------------------------------------
#  FUNCTION NAME: print_rainbow_line
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Prints a dashed line in alternating colors.  User provides
#                 the line length as the sole paramter.  The default value
#                 of 60 uses a single print, while custom values incur a
#                 performance penalty of a print per character
#
# ----------------------------------------------------------------------------
function print_rainbow_line()
{
  local color_array=($TC_RED $TC_YEL $TC_GRN $TC_BLU $TC_CYN $TC_MAG)
  local count_max=60
  local count=0

  # Check for value provided
  if [ $# -eq 0 ]; then
     count_max=60
  else
     count_max=$1
  fi

  # Default value - single printf
  if [ $count_max -eq 60 ]; then

    local line="$TC_RED-$TC_YEL-$TC_GRN-$TC_BLU-$TC_CYN-$TC_MAG-"

    printf "%b%b%b%b%b%b%b%b%b%b${TC_OFF}\n"                   \
                      "$line" "$line" "$line" "$line" "$line"  \
                      "$line" "$line" "$line" "$line" "$line"

  # Otherwise, looping printf
  else

    # Print a character at a time, cycling colors
    for n in $(eval echo "{1..$count_max}") ; do

        local col=${color_array[$count]}

        printf "${col}%s" "-"

        count=$(($count + 1))
        count=$(expr $count % 6)

    done

    # print newline
    printf "${TC_OFF}\n"

  fi

} # print_rainbow_line


# ----------------------------------------------------------------------------
#  FUNCTION NAME: print_ansi_colors
# ----------------------------------------------------------------------------
#
#  DESCRIPTION  : Prints all the ANSI terminal color combinations
#
# ----------------------------------------------------------------------------
function print_ansi_colors()
{
    echo ""

    for x in 0 1 4 5 7 8; do
        for i in `seq 30 37`; do
            for a in `seq 40 47`; do
                echo -ne "\e[$x;$i;$a""m\\\e[$x;$i;$a""m\e[0;37;40m "
            done
            echo
        done
    done

    echo ""
}


# -- End of File  ------------------------------------------------------------
# ----------------------------------------------------------------------------
